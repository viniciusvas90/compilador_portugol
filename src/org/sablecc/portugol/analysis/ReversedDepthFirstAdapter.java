/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.sablecc.portugol.analysis;

import java.util.*;
import org.sablecc.portugol.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getFimPrograma() != null)
        {
            node.getFimPrograma().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicioPrograma() != null)
        {
            node.getInicioPrograma().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getComecaPrograma() != null)
        {
            node.getComecaPrograma().apply(this);
        }
        outAPrograma(node);
    }

    public void inADeclVariavelDeclaracao(ADeclVariavelDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclVariavelDeclaracao(ADeclVariavelDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclVariavelDeclaracao(ADeclVariavelDeclaracao node)
    {
        inADeclVariavelDeclaracao(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getVarSeq() != null)
        {
            node.getVarSeq().apply(this);
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outADeclVariavelDeclaracao(node);
    }

    public void inADeclConstanteDeclaracao(ADeclConstanteDeclaracao node)
    {
        defaultIn(node);
    }

    public void outADeclConstanteDeclaracao(ADeclConstanteDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclConstanteDeclaracao(ADeclConstanteDeclaracao node)
    {
        inADeclConstanteDeclaracao(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outADeclConstanteDeclaracao(node);
    }

    public void inASequenciaVarVarSeq(ASequenciaVarVarSeq node)
    {
        defaultIn(node);
    }

    public void outASequenciaVarVarSeq(ASequenciaVarVarSeq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenciaVarVarSeq(ASequenciaVarVarSeq node)
    {
        inASequenciaVarVarSeq(node);
        if(node.getVarSeq() != null)
        {
            node.getVarSeq().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outASequenciaVarVarSeq(node);
    }

    public void inAUnicaVarVarSeq(AUnicaVarVarSeq node)
    {
        defaultIn(node);
    }

    public void outAUnicaVarVarSeq(AUnicaVarVarSeq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicaVarVarSeq(AUnicaVarVarSeq node)
    {
        inAUnicaVarVarSeq(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAUnicaVarVarSeq(node);
    }

    public void inATipoRealTipo(ATipoRealTipo node)
    {
        defaultIn(node);
    }

    public void outATipoRealTipo(ATipoRealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoRealTipo(ATipoRealTipo node)
    {
        inATipoRealTipo(node);
        if(node.getTipoReal() != null)
        {
            node.getTipoReal().apply(this);
        }
        outATipoRealTipo(node);
    }

    public void inATipoIntTipo(ATipoIntTipo node)
    {
        defaultIn(node);
    }

    public void outATipoIntTipo(ATipoIntTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoIntTipo(ATipoIntTipo node)
    {
        inATipoIntTipo(node);
        if(node.getTipoInt() != null)
        {
            node.getTipoInt().apply(this);
        }
        outATipoIntTipo(node);
    }

    public void inATipoCharTipo(ATipoCharTipo node)
    {
        defaultIn(node);
    }

    public void outATipoCharTipo(ATipoCharTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoCharTipo(ATipoCharTipo node)
    {
        inATipoCharTipo(node);
        if(node.getTipoChar() != null)
        {
            node.getTipoChar().apply(this);
        }
        outATipoCharTipo(node);
    }

    public void inAVariavelSimplesVar(AVariavelSimplesVar node)
    {
        defaultIn(node);
    }

    public void outAVariavelSimplesVar(AVariavelSimplesVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelSimplesVar(AVariavelSimplesVar node)
    {
        inAVariavelSimplesVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVariavelSimplesVar(node);
    }

    public void inAVariavelArrayVar(AVariavelArrayVar node)
    {
        defaultIn(node);
    }

    public void outAVariavelArrayVar(AVariavelArrayVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelArrayVar(AVariavelArrayVar node)
    {
        inAVariavelArrayVar(node);
        if(node.getFechaColchete() != null)
        {
            node.getFechaColchete().apply(this);
        }
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        if(node.getAbreColchete() != null)
        {
            node.getAbreColchete().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVariavelArrayVar(node);
    }

    public void inAInteiroValor(AInteiroValor node)
    {
        defaultIn(node);
    }

    public void outAInteiroValor(AInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroValor(AInteiroValor node)
    {
        inAInteiroValor(node);
        if(node.getNumeroInt() != null)
        {
            node.getNumeroInt().apply(this);
        }
        outAInteiroValor(node);
    }

    public void inARealValor(ARealValor node)
    {
        defaultIn(node);
    }

    public void outARealValor(ARealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealValor(ARealValor node)
    {
        inARealValor(node);
        if(node.getNumeroReal() != null)
        {
            node.getNumeroReal().apply(this);
        }
        outARealValor(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getVarSeq() != null)
        {
            node.getVarSeq().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getLeiaConsole() != null)
        {
            node.getLeiaConsole().apply(this);
        }
        outALeiaComando(node);
    }

    public void inAEscrevaComando(AEscrevaComando node)
    {
        defaultIn(node);
    }

    public void outAEscrevaComando(AEscrevaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaComando(AEscrevaComando node)
    {
        inAEscrevaComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getExpSeq() != null)
        {
            node.getExpSeq().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getEscrevaConsole() != null)
        {
            node.getEscrevaConsole().apply(this);
        }
        outAEscrevaComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getSeDecl() != null)
        {
            node.getSeDecl().apply(this);
        }
        outASeComando(node);
    }

    public void inAAvalieComando(AAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieComando(AAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComando(AAvalieComando node)
    {
        inAAvalieComando(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getFimAvalie() != null)
        {
            node.getFimAvalie().apply(this);
        }
        {
            List<PCasoSenao> copy = new ArrayList<PCasoSenao>(node.getCasoSenao());
            Collections.reverse(copy);
            for(PCasoSenao e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PCasoSeq> copy = new ArrayList<PCasoSeq>(node.getCasoSeq());
            Collections.reverse(copy);
            for(PCasoSeq e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outAAvalieComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getFimEnquanto() != null)
        {
            node.getFimEnquanto().apply(this);
        }
        if(node.getMeio() != null)
        {
            node.getMeio().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        {
            List<PComandoSeq> copy = new ArrayList<PComandoSeq>(node.getComandoSeq());
            Collections.reverse(copy);
            for(PComandoSeq e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getMeio() != null)
        {
            node.getMeio().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        {
            List<PComandoSeq> copy = new ArrayList<PComandoSeq>(node.getComandoSeq());
            Collections.reverse(copy);
            for(PComandoSeq e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getMeio() != null)
        {
            node.getMeio().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        {
            List<PComandoSeq> copy = new ArrayList<PComandoSeq>(node.getComandoSeq());
            Collections.reverse(copy);
            for(PComandoSeq e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getAtee() != null)
        {
            node.getAtee().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getDee() != null)
        {
            node.getDee().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAParaComando(node);
    }

    public void inAParaPassoComando(AParaPassoComando node)
    {
        defaultIn(node);
    }

    public void outAParaPassoComando(AParaPassoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaPassoComando(AParaPassoComando node)
    {
        inAParaPassoComando(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        if(node.getFimPara() != null)
        {
            node.getFimPara().apply(this);
        }
        if(node.getMeio() != null)
        {
            node.getMeio().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        {
            List<PComandoSeq> copy = new ArrayList<PComandoSeq>(node.getComandoSeq());
            Collections.reverse(copy);
            for(PComandoSeq e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getAtee() != null)
        {
            node.getAtee().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getPassoo() != null)
        {
            node.getPassoo().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getDee() != null)
        {
            node.getDee().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAParaPassoComando(node);
    }

    public void inAComandoSeq(AComandoSeq node)
    {
        defaultIn(node);
    }

    public void outAComandoSeq(AComandoSeq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSeq(AComandoSeq node)
    {
        inAComandoSeq(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoSeq(node);
    }

    public void inACasoSeq(ACasoSeq node)
    {
        defaultIn(node);
    }

    public void outACasoSeq(ACasoSeq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoSeq(ACasoSeq node)
    {
        inACasoSeq(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        {
            List<PComandoSeq> copy = new ArrayList<PComandoSeq>(node.getComandoSeq());
            Collections.reverse(copy);
            for(PComandoSeq e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        outACasoSeq(node);
    }

    public void inACasoSenao(ACasoSenao node)
    {
        defaultIn(node);
    }

    public void outACasoSenao(ACasoSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoSenao(ACasoSenao node)
    {
        inACasoSenao(node);
        if(node.getPontoVirgula() != null)
        {
            node.getPontoVirgula().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        {
            List<PComandoSeq> copy = new ArrayList<PComandoSeq>(node.getComandoSeq());
            Collections.reverse(copy);
            for(PComandoSeq e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDoisPontos() != null)
        {
            node.getDoisPontos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outACasoSenao(node);
    }

    public void inAComSenaoSeDecl(AComSenaoSeDecl node)
    {
        defaultIn(node);
    }

    public void outAComSenaoSeDecl(AComSenaoSeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComSenaoSeDecl(AComSenaoSeDecl node)
    {
        inAComSenaoSeDecl(node);
        if(node.getPvfim() != null)
        {
            node.getPvfim().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getPvsenao() != null)
        {
            node.getPvsenao().apply(this);
        }
        if(node.getCsenao() != null)
        {
            node.getCsenao().apply(this);
        }
        {
            List<PComandoSeq> copy = new ArrayList<PComandoSeq>(node.getSenaoo());
            Collections.reverse(copy);
            for(PComandoSeq e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        if(node.getPvse() != null)
        {
            node.getPvse().apply(this);
        }
        if(node.getCse() != null)
        {
            node.getCse().apply(this);
        }
        {
            List<PComandoSeq> copy = new ArrayList<PComandoSeq>(node.getSee());
            Collections.reverse(copy);
            for(PComandoSeq e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAComSenaoSeDecl(node);
    }

    public void inASemSenaoSeDecl(ASemSenaoSeDecl node)
    {
        defaultIn(node);
    }

    public void outASemSenaoSeDecl(ASemSenaoSeDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemSenaoSeDecl(ASemSenaoSeDecl node)
    {
        inASemSenaoSeDecl(node);
        if(node.getPvfim() != null)
        {
            node.getPvfim().apply(this);
        }
        if(node.getFimSe() != null)
        {
            node.getFimSe().apply(this);
        }
        if(node.getPvse() != null)
        {
            node.getPvse().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        {
            List<PComandoSeq> copy = new ArrayList<PComandoSeq>(node.getComandoSeq());
            Collections.reverse(copy);
            for(PComandoSeq e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASemSenaoSeDecl(node);
    }

    public void inAComOpExp(AComOpExp node)
    {
        defaultIn(node);
    }

    public void outAComOpExp(AComOpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComOpExp(AComOpExp node)
    {
        inAComOpExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getOp() != null)
        {
            node.getOp().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAComOpExp(node);
    }

    public void inASemOpExp(ASemOpExp node)
    {
        defaultIn(node);
    }

    public void outASemOpExp(ASemOpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemOpExp(ASemOpExp node)
    {
        inASemOpExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outASemOpExp(node);
    }

    public void inAComOp2Termo(AComOp2Termo node)
    {
        defaultIn(node);
    }

    public void outAComOp2Termo(AComOp2Termo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComOp2Termo(AComOp2Termo node)
    {
        inAComOp2Termo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getOp2() != null)
        {
            node.getOp2().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAComOp2Termo(node);
    }

    public void inASemOp2Termo(ASemOp2Termo node)
    {
        defaultIn(node);
    }

    public void outASemOp2Termo(ASemOp2Termo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemOp2Termo(ASemOp2Termo node)
    {
        inASemOp2Termo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outASemOp2Termo(node);
    }

    public void inANegativoTermo(ANegativoTermo node)
    {
        defaultIn(node);
    }

    public void outANegativoTermo(ANegativoTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegativoTermo(ANegativoTermo node)
    {
        inANegativoTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getSubtracao() != null)
        {
            node.getSubtracao().apply(this);
        }
        outANegativoTermo(node);
    }

    public void inAEmparentadoFator(AEmparentadoFator node)
    {
        defaultIn(node);
    }

    public void outAEmparentadoFator(AEmparentadoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmparentadoFator(AEmparentadoFator node)
    {
        inAEmparentadoFator(node);
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        outAEmparentadoFator(node);
    }

    public void inAConstanteFator(AConstanteFator node)
    {
        defaultIn(node);
    }

    public void outAConstanteFator(AConstanteFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstanteFator(AConstanteFator node)
    {
        inAConstanteFator(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAConstanteFator(node);
    }

    public void inAVariavelFator(AVariavelFator node)
    {
        defaultIn(node);
    }

    public void outAVariavelFator(AVariavelFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelFator(AVariavelFator node)
    {
        inAVariavelFator(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVariavelFator(node);
    }

    public void inASomaOp(ASomaOp node)
    {
        defaultIn(node);
    }

    public void outASomaOp(ASomaOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaOp(ASomaOp node)
    {
        inASomaOp(node);
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        outASomaOp(node);
    }

    public void inASubtracaoOp(ASubtracaoOp node)
    {
        defaultIn(node);
    }

    public void outASubtracaoOp(ASubtracaoOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtracaoOp(ASubtracaoOp node)
    {
        inASubtracaoOp(node);
        if(node.getSubtracao() != null)
        {
            node.getSubtracao().apply(this);
        }
        outASubtracaoOp(node);
    }

    public void inAMultiplicacaoOp2(AMultiplicacaoOp2 node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoOp2(AMultiplicacaoOp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoOp2(AMultiplicacaoOp2 node)
    {
        inAMultiplicacaoOp2(node);
        if(node.getMulti() != null)
        {
            node.getMulti().apply(this);
        }
        outAMultiplicacaoOp2(node);
    }

    public void inADivisaoOp2(ADivisaoOp2 node)
    {
        defaultIn(node);
    }

    public void outADivisaoOp2(ADivisaoOp2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoOp2(ADivisaoOp2 node)
    {
        inADivisaoOp2(node);
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        outADivisaoOp2(node);
    }

    public void inASequenciaExpExpSeq(ASequenciaExpExpSeq node)
    {
        defaultIn(node);
    }

    public void outASequenciaExpExpSeq(ASequenciaExpExpSeq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenciaExpExpSeq(ASequenciaExpExpSeq node)
    {
        inASequenciaExpExpSeq(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExpSeq() != null)
        {
            node.getExpSeq().apply(this);
        }
        outASequenciaExpExpSeq(node);
    }

    public void inAUnicaExpExpSeq(AUnicaExpExpSeq node)
    {
        defaultIn(node);
    }

    public void outAUnicaExpExpSeq(AUnicaExpExpSeq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUnicaExpExpSeq(AUnicaExpExpSeq node)
    {
        inAUnicaExpExpSeq(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAUnicaExpExpSeq(node);
    }

    public void inAExpLogica(AExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpLogica(AExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogica(AExpLogica node)
    {
        inAExpLogica(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getOpLogicos() != null)
        {
            node.getOpLogicos().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAExpLogica(node);
    }

    public void inADisjuncaoExpLogica2(ADisjuncaoExpLogica2 node)
    {
        defaultIn(node);
    }

    public void outADisjuncaoExpLogica2(ADisjuncaoExpLogica2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADisjuncaoExpLogica2(ADisjuncaoExpLogica2 node)
    {
        inADisjuncaoExpLogica2(node);
        if(node.getExpLogica3() != null)
        {
            node.getExpLogica3().apply(this);
        }
        if(node.getDisjuncao() != null)
        {
            node.getDisjuncao().apply(this);
        }
        if(node.getExpLogica2() != null)
        {
            node.getExpLogica2().apply(this);
        }
        outADisjuncaoExpLogica2(node);
    }

    public void inADisjuncaoxExpLogica2(ADisjuncaoxExpLogica2 node)
    {
        defaultIn(node);
    }

    public void outADisjuncaoxExpLogica2(ADisjuncaoxExpLogica2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADisjuncaoxExpLogica2(ADisjuncaoxExpLogica2 node)
    {
        inADisjuncaoxExpLogica2(node);
        if(node.getExpLogica3() != null)
        {
            node.getExpLogica3().apply(this);
        }
        if(node.getDisjuncaoExc() != null)
        {
            node.getDisjuncaoExc().apply(this);
        }
        if(node.getExpLogica2() != null)
        {
            node.getExpLogica2().apply(this);
        }
        outADisjuncaoxExpLogica2(node);
    }

    public void inASimplesExpLogica2(ASimplesExpLogica2 node)
    {
        defaultIn(node);
    }

    public void outASimplesExpLogica2(ASimplesExpLogica2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesExpLogica2(ASimplesExpLogica2 node)
    {
        inASimplesExpLogica2(node);
        if(node.getExpLogica3() != null)
        {
            node.getExpLogica3().apply(this);
        }
        outASimplesExpLogica2(node);
    }

    public void inAConjuncaoExpLogica3(AConjuncaoExpLogica3 node)
    {
        defaultIn(node);
    }

    public void outAConjuncaoExpLogica3(AConjuncaoExpLogica3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConjuncaoExpLogica3(AConjuncaoExpLogica3 node)
    {
        inAConjuncaoExpLogica3(node);
        if(node.getExpLogica4() != null)
        {
            node.getExpLogica4().apply(this);
        }
        if(node.getConjuncao() != null)
        {
            node.getConjuncao().apply(this);
        }
        if(node.getExpLogica3() != null)
        {
            node.getExpLogica3().apply(this);
        }
        outAConjuncaoExpLogica3(node);
    }

    public void inASimplesExpLogica3(ASimplesExpLogica3 node)
    {
        defaultIn(node);
    }

    public void outASimplesExpLogica3(ASimplesExpLogica3 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesExpLogica3(ASimplesExpLogica3 node)
    {
        inASimplesExpLogica3(node);
        if(node.getExpLogica4() != null)
        {
            node.getExpLogica4().apply(this);
        }
        outASimplesExpLogica3(node);
    }

    public void inASimplesExpLogica4(ASimplesExpLogica4 node)
    {
        defaultIn(node);
    }

    public void outASimplesExpLogica4(ASimplesExpLogica4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimplesExpLogica4(ASimplesExpLogica4 node)
    {
        inASimplesExpLogica4(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outASimplesExpLogica4(node);
    }

    public void inANegadaExpLogica4(ANegadaExpLogica4 node)
    {
        defaultIn(node);
    }

    public void outANegadaExpLogica4(ANegadaExpLogica4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegadaExpLogica4(ANegadaExpLogica4 node)
    {
        inANegadaExpLogica4(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getNegacao() != null)
        {
            node.getNegacao().apply(this);
        }
        outANegadaExpLogica4(node);
    }

    public void inAParentadoExpLogica4(AParentadoExpLogica4 node)
    {
        defaultIn(node);
    }

    public void outAParentadoExpLogica4(AParentadoExpLogica4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentadoExpLogica4(AParentadoExpLogica4 node)
    {
        inAParentadoExpLogica4(node);
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getExpLogica2() != null)
        {
            node.getExpLogica2().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        outAParentadoExpLogica4(node);
    }

    public void inAParentadonegadoExpLogica4(AParentadonegadoExpLogica4 node)
    {
        defaultIn(node);
    }

    public void outAParentadonegadoExpLogica4(AParentadonegadoExpLogica4 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentadonegadoExpLogica4(AParentadonegadoExpLogica4 node)
    {
        inAParentadonegadoExpLogica4(node);
        if(node.getFechaParentese() != null)
        {
            node.getFechaParentese().apply(this);
        }
        if(node.getExpLogica2() != null)
        {
            node.getExpLogica2().apply(this);
        }
        if(node.getAbreParentese() != null)
        {
            node.getAbreParentese().apply(this);
        }
        if(node.getNegacao() != null)
        {
            node.getNegacao().apply(this);
        }
        outAParentadonegadoExpLogica4(node);
    }

    public void inAIgualOpLogicos(AIgualOpLogicos node)
    {
        defaultIn(node);
    }

    public void outAIgualOpLogicos(AIgualOpLogicos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualOpLogicos(AIgualOpLogicos node)
    {
        inAIgualOpLogicos(node);
        if(node.getIgualdade() != null)
        {
            node.getIgualdade().apply(this);
        }
        outAIgualOpLogicos(node);
    }

    public void inADifOpLogicos(ADifOpLogicos node)
    {
        defaultIn(node);
    }

    public void outADifOpLogicos(ADifOpLogicos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifOpLogicos(ADifOpLogicos node)
    {
        inADifOpLogicos(node);
        if(node.getDiferenca() != null)
        {
            node.getDiferenca().apply(this);
        }
        outADifOpLogicos(node);
    }

    public void inAMenoriOpLogicos(AMenoriOpLogicos node)
    {
        defaultIn(node);
    }

    public void outAMenoriOpLogicos(AMenoriOpLogicos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenoriOpLogicos(AMenoriOpLogicos node)
    {
        inAMenoriOpLogicos(node);
        if(node.getMenorIgual() != null)
        {
            node.getMenorIgual().apply(this);
        }
        outAMenoriOpLogicos(node);
    }

    public void inAMaioriOpLogicos(AMaioriOpLogicos node)
    {
        defaultIn(node);
    }

    public void outAMaioriOpLogicos(AMaioriOpLogicos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaioriOpLogicos(AMaioriOpLogicos node)
    {
        inAMaioriOpLogicos(node);
        if(node.getMaiorIgual() != null)
        {
            node.getMaiorIgual().apply(this);
        }
        outAMaioriOpLogicos(node);
    }

    public void inAMenorOpLogicos(AMenorOpLogicos node)
    {
        defaultIn(node);
    }

    public void outAMenorOpLogicos(AMenorOpLogicos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorOpLogicos(AMenorOpLogicos node)
    {
        inAMenorOpLogicos(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorOpLogicos(node);
    }

    public void inAMaiorOpLogicos(AMaiorOpLogicos node)
    {
        defaultIn(node);
    }

    public void outAMaiorOpLogicos(AMaiorOpLogicos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorOpLogicos(AMaiorOpLogicos node)
    {
        inAMaiorOpLogicos(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorOpLogicos(node);
    }
}
